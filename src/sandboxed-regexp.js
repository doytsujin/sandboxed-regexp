/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// This is a bespoke wrapper around the wasm-pack-generated wasm code,
// which lets us customize the loading logic.
//
// The default JS wrapper generated by wasm-pack will initialize a single shared
// `WebAssembly.Instance` to load and initialize the compiled wasm code, including
// setting up the underlying `ArrayBuffer` memory buffer. This instance if owned
// by the JS wrapper module, like so:
//
//  +-----------+
//  | JS Object |-------+
//  +-----------+       |
//                      v
//  +-----------+     +-----------+     +---------------+
//  | JS Object | --> | JS Module | --> | WASM Instance |
//  +-----------+     +-----------+     +---------------+
//                      ^                              |
//  +-----------+       |             +-------------+  |
//  | JS Object |-------+             | WASM Module |<-+
//  +-----------+                     +-------------+
//
// For our purposes, we want each `SandboxedRegExp` instance to have its own
// separate `WebAssembly.Instance`, its own separate `ArrayBuffer` memory, etc.
// Like this:
//
//  +-----------+    +---------------+
//  | JS Object |--->| WASM Instance |-------+
//  +-----------+    +---------------+       |
//                                           v
//  +-----------+    +---------------+     +------------------+
//  | JS Object |--->| WASM Instance |---->| WASM Module Code |
//  +-----------+    +---------------+     +------------------+
//                                           ^
//  +-----------+    +---------------+       |
//  | JS Object |--->| WASM Instance |-------+
//  +-----------+    +---------------+
//
// There are two key benefits to this setup:
//
//  * Two different `SandboxedRegExp` objects cannot interfere with each other,
//    not even by competing for resources or by exploiting bugs in the rust code.
//
//  * When a `SandboxedRegExp` object is garbage-collected, its WASM `Instance`
//    and the associated `ArrayBuffer` can also be garbage-collected without
//    requiring calling code to do any explicit cleanup.
//  

const path = require('path');
const fs = require('fs');

const wasmBytes = fs.readFileSync(path.join(__dirname, 'sandboxed-regexp_bg.wasm'));
const wasmModule = new WebAssembly.Module(wasmBytes);


class SandboxedRegExp {

  constructor(pattern, ...extraArgsThatWontWorkCorrectly) {
    // We don't want to silently do the wrong thing if the caller
    // tries to use advanced RegExp constructor syntax with this class.
    if (typeof pattern !== "string") {
      throw new Error("Sorry, `SandboxedRegExp` only accepts string arguments");
    }
    if (extraArgsThatWontWorkCorrectly.length !== 0) {
      throw new Error("Sorry, `SandboxedRegExp` goes not support flag arguments");
    }
    this._pattern = pattern;
    // We get our own module instance, memory, etc.
    this._instance = new WebAssembly.Instance(wasmModule, {});
    this._wasm = this._instance.exports;
    // Cached reference to the underlying `memory` object.
    // Be careful, this might change after each call into wasm!
    this._memBytes = this._wasm.memory.buffer;
    this._memBuf = Buffer.from(this._memBytes);
    this._wasm.init(...this._passStringToWasm(pattern));
  }

  test(haystack) {
    return !!this._wasm.test(...this._passStringToWasm(haystack));
  }

  _passStringToWasm(value) {
    const len = Buffer.byteLength(value, "utf8");
    // The wasm code takes ownership of this ptr and will free it.
    const ptr = this._wasm.__wbindgen_malloc(len);
    if (this._memBytes !== this._wasm.memory.buffer) {
      this._memBytes = this._wasm.memory.buffer;
      this._memBuf = Buffer.from(this._memBytes);
    }
    this._memBuf.write(value, ptr, len, "utf8");
    return [ptr, len];
  }

  // Try to prevent silent-failure footguns if callers treat this
  // too much like a regular JS RegExp object.

  get lastIndex() {
    return 0;
  }

  set lastIndex(value) {
    throw new Error("Sorry, `SandboxedRegExp` does not support setting `.lastIndex`");
  }

  get flags() {
    return "";
  }

  get dotAll() {
    return false;
  }

  get global() {
    return false;
  }

  get ignoreCase() {
    return false;
  }

  get multiline() {
    return false;
  }

  get source() {
    return this._pattern;
  }

  get unicode() {
    return true;
  }
}

module.exports.SandboxedRegExp = SandboxedRegExp;
